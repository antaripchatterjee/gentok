#ifndef __GENTOK_H__
#define __GENTOK_H__

#include <ctype.h>
#ifdef MAKEFILECOMPILING
#include "script.h"
#include "helper.h"
#else
#include "../include/script.h"
#include "../include/helper.h"
#endif // MAKEFILECOMPILING

enum TOKENTYPE_E {
    T_TOKEN_INVALID = -1,
    T_TOKEN_UNKNOWN,
    T_WHITESPACE_SPACE,
    T_WHITESPACE_HORIZONTAL_TAB,
    T_WHITESPACE_VERTICAL_TAB, 
    T_WHITESPACE_FORM_FEED,
    T_WHITESPACE_CARRIAGE_RETURN,
    T_WHITESPACE_LINE_FEED,
    T_OPERAND_IDENTIFIER,
    T_OPERAND_STRING_VALUE,
    T_OPERAND_BINARY_NUMBER,
    T_OPERAND_OCTAL_NUMBER,
    T_OPERAND_DECIMAL_NUMBER,
    T_OPERAND_HEXDECIMAL_NUMBER,
    T_OPERATOR_UNARY_SIGN_PLUS,
    T_OPERATOR_UNARY_SIGN_MINUS,
    T_RESERVED_KEYWORD_AS,
    T_RESERVED_KEYWORD_AUTO,
    T_RESERVED_KEYWORD_BREAK,
    T_RESERVED_KEYWORD_CLASS,
    T_RESERVED_KEYWORD_CONTINUE,
    T_RESERVED_KEYWORD_DEF,
    T_RESERVED_KEYWORD_ELIF,
    T_RESERVED_KEYWORD_ELSE,
    T_RESERVED_KEYWORD_ENSURE,
    T_RESERVED_KEYWORD_FALSE,
    T_RESERVED_KEYWORD_FINAL,
    T_RESERVED_KEYWORD_FOR,
    T_RESERVED_KEYWORD_FOREACH,
    T_RESERVED_KEYWORD_IF,
    T_RESERVED_KEYWORD_IMPORT,
    T_RESERVED_KEYWORD_MATCH,
    T_RESERVED_KEYWORD_NULL,
    T_RESERVED_KEYWORD_RAISE,
    T_RESERVED_KEYWORD_REF,
    T_RESERVED_KEYWORD_RESCUE,
    T_RESERVED_KEYWORD_RETURN,
    T_RESERVED_KEYWORD_TRUE,
    T_RESERVED_KEYWORD_TRY,
    T_RESERVED_KEYWORD_WHEN,
    T_RESERVED_KEYWORD_WHILE,
    T_OPERATOR_LOGICAL_NOT,
    T_OPERATOR_COMPARE_NONEQUALITY,
    T_OPERATOR_MODULUS,
    T_OPERATOR_MODULUS_AND_ASSIGN,
    T_OPERATOR_BITWISE_AND,
    T_OPERATOR_LOGICAL_AND,
    T_OPERATOR_BITWISEAND_AND_ASSIGN,
    T_SYMBOL_OPENING_PARANANTHESIS,
    T_SYMBOL_CLOSING_PARANANTHESIS,
    T_OPERATOR_MULTIPLICATION,
    T_OPERATOR_EXPONENTIATION,
    T_OPERATOR_EXPONENTIATION_AND_ASSIGN,
    T_OPERATOR_MULTIPLICATION_AND_ASSIGN,
    T_OPERATOR_ADDITION,
    T_OPERATOR_INCREMENT_AND_ASSIGN,
    T_SYMBOL_COMMA,
    T_OPERATOR_SUBTRACTION,
    T_OPERATOR_DECREMENT_AND_ASSIGN,
    T_SYMBOL_DOT,
    T_OPERATOR_MERGE,
    T_OPERATOR_ELLIPSIS,
    T_OPERATOR_DIVISION,
    T_OPERATOR_DIVISION_AND_ASSIGN,
    T_SYMBOL_COLON,
    T_SYMBOL_SEMICOLON,
    T_OPERATOR_COMPARE_LESSNESS,
    T_OPERATOR_BITWISE_LEFT_SHIFT,
    T_OPERATOR_BITWISE_LEFT_SHIFT_AND_ASSIGN,
    T_OPERATOR_COMPARE_LESSNESS_OR_EQUALITY,
    T_OPERATOR_SIMPLE_ASSIGN,
    T_OPERATOR_COMPARE_EQUALITY,
    T_OPERATOR_COMPARE_GREATNESS,
    T_OPERATOR_COMPARE_GREATNESS_OR_EQUALITY,
    T_OPERATOR_BITWISE_RIGHT_SHIFT,
    T_OPERATOR_BITWISE_RIGHT_SHIFT_AND_ASSIGN,
    T_SYMBOL_QUESTION_MARK,
    T_SYMBOL_AT_MARK,
    T_SYMBOL_OPENING_SQUARE_BRACKET,
    T_SYMBOL_BACKWARD_SLASH,
    T_SYMBOL_CLOSING_SQUARE_BRACKET,
    T_OPERATOR_BITWISE_XOR,
    T_OPERATOR_BITWISE_XOR_AND_ASSIGN,
    T_SYMBOL_OPENING_CURLY_BRACKET,
    T_OPERATOR_BITWISE_OR,
    T_OPERATOR_BITWISE_OR_AND_ASSIGN,
    T_OPERATOR_LOGICAL_OR,
    T_SYMBOL_CLOSING_CURLY_BRACKET,
    T_OPERATOR_BITWISE_NOT
}; // enum TOKENTYPE_E

#define OTHER_TOKEN_OFFSET ((long int) T_OPERATOR_LOGICAL_NOT)
#define RESERVED_KEYWORD_OFFSET ((long int) T_RESERVED_KEYWORD_AS)

struct token_t {
    enum TOKENTYPE_E token_type;
    char* token_buffer;
    struct token_t* next_token;
}; // struct token_t

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

bool tokenize(const char* script, struct token_t* token, long* number_of_tokens);
long free_tokens(struct token_t* token);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __GENTOK_H__