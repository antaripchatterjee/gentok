#ifndef __GENTOK_H__
#define __GENTOK_H__

#include <ctype.h>
#ifdef MAKEFILECOMPILING
#include "script.h"
#include "helper.h"
#else
#include "../include/script.h"
#include "../include/helper.h"
#endif // MAKEFILECOMPILING

enum TOKENTYPE_E {
    T_TOKEN_INVALID = -1,
    T_TOKEN_UNKNOWN,
    T_WHITESPACE_SPACE,
    T_WHITESPACE_HORIZONTAL_TAB,
    T_WHITESPACE_VERTICAL_TAB, 
    T_WHITESPACE_FORM_FEED,
    T_WHITESPACE_CARRIAGE_RETURN,
    T_WHITESPACE_LINE_FEED,
    T_OPERAND_IDENTIFIER,
    T_OPERAND_STRING_VALUE,
    T_OPERAND_STRING_TEMPLATE,
    T_OPERAND_BINARY_INTEGER,
    T_OPERAND_OCTAL_INTEGER,
    T_OPERAND_DECIMAL_INTEGER,
    T_OPERAND_DECIMAL_DOUBLE,
    T_OPERAND_HEXDECIMAL_INTEGER,
    T_OPERATOR_SIGN_PLUS,
    T_OPERATOR_SIGN_MINUS,
    T_OPERATOR_LOGIC_NOT,
    T_OPERATOR_RELAT_NE,
    T_OPERATOR_ARITH_MOD,
    T_OPERATOR_ARITH_MODNASS,
    T_OPERATOR_BIT_AND,
    T_OPERATOR_LOGIC_AND,
    T_OPERATOR_BIT_ANDNASS,
    T_SYMBOL_SIMPLE_PARANO,
    T_SYMBOL_SIMPLE_PARANC,
    T_OPERATOR_ARITH_MULT,
    T_OPERATOR_ARITH_EXP,
    T_OPERATOR_ARITH_EXPNASS,
    T_OPERATOR_ARITH_MULTNASS,
    T_OPERATOR_ARITH_ADD,
    T_OPERATOR_ARITH_ADDNASS,
    T_SYMBOL_SIMPLE_COMMA,
    T_OPERATOR_ARITH_SUB,
    T_OPERATOR_ARITH_SUBNASS,
    T_SYMBOL_SHARP_ARROW,
    T_SYMBOL_SIMPLE_DOT,
    T_OPERATOR_SPECIAL_DDOT,
    T_SYMBOL_ELLIPSIS,
    T_OPERATOR_ARITH_DIV,
    T_OPERATOR_ARITH_DIVNASS,
    T_OPERATOR_ITER_IN,
    T_SYMBOL_TYPE_ALIAS,
    T_OPERATOR_TYPE_INFASS,
    T_SYMBOL_SIMPLE_SEMICOLON,
    T_OPERATOR_RELAT_LT,
    T_OPERATOR_BIT_LS,
    T_OPERATOR_BIT_LSNASS,
    T_OPERATOR_RELAT_LE,
    T_OPERATOR_SIMPLE_ASSIGN,
    T_OPERATOR_RELAT_EQ,
    T_OPERATOR_RELAT_GT,
    T_OPERATOR_RELAT_GE,
    T_OPERATOR_BIT_RS,
    T_OPERATOR_BIT_RSNASS,
    T_SYMBOL_NULLABLE_VAR,
    T_OPERATOR_TERN_COLEASCE,
    T_SYMBOL_SIMPLE_AT_SIGN,
    T_SYMBOL_SIMPLE_SQRBRO,
    T_SYMBOL_SIMPLE_SQRBRC,
    T_OPERATOR_BIT_XOR,
    T_OPERATOR_BIT_XORNASS,
    T_SYMBOL_SIMPLE_CURLBRO,
    T_OPERATOR_BIT_OR,
    T_OPERATOR_BIT_ORNASS,
    T_OPERATOR_LOGIC_OR,
    T_SYMBOL_SIMPLE_CURLBRC,
    T_OPERATOR_BIT_NOT,
    T_RESERVED_KEYWORD_TYPE_BOOL,
    T_RESERVED_KEYWORD_STATEMENT_BREAK,
    T_RESERVED_KEYWORD_TYPE_CHAR,
    T_RESERVED_KEYWORD_STATEMENT_CONTINUE,
    T_RESERVED_KEYWORD_STATMENT_ELSE,
    T_RESERVED_KEYWORD_STATMENT_ENUM,
    T_RESERVED_KEYWORD_TYPE_F128,
    T_RESERVED_KEYWORD_TYPE_F32,
    T_RESERVED_KEYWORD_TYPE_F64,
    T_RESERVED_KEYWORD_CONSTANT_FALSE,
    T_RESERVED_KEYWORD_CONSTANT_FINALLY,
    T_RESERVED_KEYWORD_STATEMENT_FOR,
    T_RESERVED_KEYWORD_STATEMENT_FUNC,
    T_RESERVED_KEYWORD_TYPE_I16,
    T_RESERVED_KEYWORD_TYPE_I32,
    T_RESERVED_KEYWORD_TYPE_I64,
    T_RESERVED_KEYWORD_TYPE_I8,
    T_RESERVED_KEYWORD_STATEMENT_IF,
    T_RESERVED_KEYWORD_STATEMENT_MATCH,
    T_RESERVED_KEYWORD_STATEMENT_MIXIN,
    T_RESERVED_KEYWORD_STATEMENT_NEW,
    T_RESERVED_KEYWORD_CONSTANT_NULL,
    T_RESERVED_KEYWORD_STATEMENT_RAISE,
    T_RESERVED_KEYWORD_STATEMENT_REPEAT,
    T_RESERVED_KEYWORD_STATEMENT_RESCUE,
    T_RESERVED_KEYWORD_STATEMENT_RETURN,
    T_RESERVED_KEYWORD_TYPE_STRING,
    T_RESERVED_KEYWORD_STATEMENT_STRUCT,
    T_RESERVED_KEYWORD_STATEMENT_TEMPLATE,
    T_RESERVED_KEYWORD_CONSTANT_TRUE,
    T_RESERVED_KEYWORD_TYPE_U16,
    T_RESERVED_KEYWORD_TYPE_U32,
    T_RESERVED_KEYWORD_TYPE_U64,
    T_RESERVED_KEYWORD_TYPE_U8,
    T_RESERVED_KEYWORD_STATEMENT_UNION,
    T_RESERVED_KEYWORD_STATEMENT_UNTIL,
    T_RESERVED_KEYWORD_STATEMENT_WHEN,
    T_RESERVED_KEYWORD_STATEMENT_WHILE
}; // enum TOKENTYPE_E

// #define OPERATOR_TOKEN_OFFSET ((long int) T_OPERATOR_LOGICAL_NOT)
#define RESERVED_KEYWORD_OFFSET ((long int) T_RESERVED_KEYWORD_TYPE_BOOL)
#define SYMBOL_TOKEN_OFFSET ((long int) T_OPERATOR_LOGIC_NOT)
#define LAST_RESERVED_TOKEN T_RESERVED_KEYWORD_STATEMENT_WHILE
#define ESCAPE_CHARACTER ((char) 27)
#define CANCEL_CHARACTER ((char) 24)

#define TYPE_TO_TOKEN(TOKENTYPE) ( \
    TOKENTYPE == T_OPERATOR_SIGN_PLUS ? "+" \
    : TOKENTYPE == T_OPERATOR_SIGN_MINUS ? "-" \
    : TOKENTYPE > LAST_RESERVED_TOKEN ? (const char*) NULL \
    : TOKENTYPE >= RESERVED_KEYWORD_OFFSET ? ((const char*[])RESERVED_KEYWORDS)[(size_t)(TOKENTYPE-RESERVED_KEYWORD_OFFSET)] \
    : TOKENTYPE >= SYMBOL_TOKEN_OFFSET ? ((const char*[]) VALID_SYMBOLS)[(size_t)(TOKENTYPE-SYMBOL_TOKEN_OFFSET)] \
    : (const char*) NULL \
)
 

struct token_pos_t {
    size_t line_no;
    size_t col_no;
};

struct token_t {
    enum TOKENTYPE_E token_type;
    char* token_buffer;
    struct token_pos_t pos;
    size_t line_start_pos;
    struct token_t* next_token;
}; // struct token_t

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

bool tokenize(const char* script, struct token_t* token, long* number_of_tokens);
long free_tokens(struct token_t* token);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __GENTOK_H__